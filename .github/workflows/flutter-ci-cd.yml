name: Flutter CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'

jobs:
  # Code Quality & Testing
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage --reporter expanded

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Android Build
  build-android:
    name: Build Android
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK (Debug)
        if: github.ref != 'refs/heads/main'
        run: flutter build apk --debug

      - name: Build APK (Release)
        if: github.ref == 'refs/heads/main'
        run: |
          flutter build apk --release --split-per-abi
          flutter build appbundle --release

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
          retention-days: 14

  # iOS Build
  build-ios:
    name: Build iOS
    needs: code-quality
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS (No Codesign)
        run: flutter build ios --release --no-codesign

      - name: Create IPA
        run: |
          mkdir -p Payload
          cp -r build/ios/iphoneos/Runner.app Payload/
          zip -r everyday-christian.ipa Payload
          rm -rf Payload

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: everyday-christian.ipa
          retention-days: 14

  # Integration Tests (Optional)
  integration-tests:
    name: Integration Tests
    needs: code-quality
    runs-on: macos-latest
    strategy:
      matrix:
        device:
          - "iPhone 15 Pro"
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run integration tests
        run: |
          # Run integration tests if they exist
          if [ -d "integration_test" ]; then
            flutter test integration_test
          else
            echo "No integration tests found, skipping..."
          fi

  # Release to Firebase App Distribution (Beta)
  deploy-android-beta:
    name: Deploy Android to Firebase
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: flutter-apk/app-release.apk
          releaseNotes: "Automated beta build from develop branch"

  # Deploy to Play Store Internal Track
  deploy-android-production:
    name: Deploy Android to Play Store
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds

      - name: Release to Play Store (Internal Track)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}
          packageName: com.everydaychristian.app
          releaseFiles: bundle/release/app-release.aab
          track: internal
          status: completed

  # Deploy to TestFlight (Beta)
  deploy-ios-beta:
    name: Deploy iOS to TestFlight
    needs: build-ios
    runs-on: macos-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-build

      - name: Upload to TestFlight
        run: |
          # This requires proper signing and provisioning profiles
          # Set up using secrets and Xcode Cloud or Fastlane
          echo "TestFlight upload requires signing configuration"
          echo "Configure using Fastlane for production deployments"

  # Notify on Completion
  notify:
    name: Send Notifications
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack notification
        if: github.ref == 'refs/heads/main'
        run: |
          # Add Slack webhook notification here
          echo "Build completed. Configure Slack webhook in secrets."
