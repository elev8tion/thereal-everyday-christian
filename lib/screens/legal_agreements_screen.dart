import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:url_launcher/url_launcher.dart';
import '../core/services/preferences_service.dart';
import '../core/navigation/app_routes.dart';
import '../theme/app_theme.dart';
import '../components/frosted_glass_card.dart';
import '../components/gradient_background.dart';
import '../components/glass_button.dart';
import '../utils/legal_document_viewer.dart';

/// Combined legal agreements screen showing crisis disclaimer and terms/privacy acceptance
/// Uses clickwrap method (checkboxes) for legally strong consent
class LegalAgreementsScreen extends StatefulWidget {
  const LegalAgreementsScreen({super.key});

  @override
  State<LegalAgreementsScreen> createState() => _LegalAgreementsScreenState();
}

class _LegalAgreementsScreenState extends State<LegalAgreementsScreen> {
  bool _termsChecked = false;
  bool _privacyChecked = false;
  bool _isAccepting = false;
  bool _isNavigating = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          const GradientBackground(),
          SafeArea(
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildIntroText(),
                      const SizedBox(height: 32),
                      _buildDisclaimerSection(
                        icon: Icons.health_and_safety,
                        title: 'Not Professional Counseling',
                        content:
                            'This app provides biblical guidance and spiritual support. It is NOT a substitute for professional mental health services, medical advice, or crisis intervention.',
                      ),
                      const SizedBox(height: 24),
                      _buildCrisisResourcesSection(),
                      const SizedBox(height: 24),
                      _buildDisclaimerSection(
                        icon: Icons.gavel,
                        title: 'No Medical or Legal Advice',
                        content:
                            'Information provided is for spiritual guidance only. Always consult qualified professionals for medical, legal, or financial matters.',
                      ),
                      const SizedBox(height: 24),
                      _buildDisclaimerSection(
                        icon: Icons.smart_toy,
                        title: 'AI Limitations',
                        content:
                            'Responses are generated by AI and may occasionally be inaccurate or incomplete. Use discernment and verify important information with trusted sources.',
                      ),
                      const SizedBox(height: 24),
                      _buildDisclaimerSection(
                        icon: Icons.lightbulb_outline,
                        title: 'Recommended Use',
                        content:
                            'Best used as a companion to regular prayer, Bible study, and fellowship with a local church community. Not a replacement for spiritual community.',
                      ),
                      const SizedBox(height: 40),
                      _buildConsentSection(),
                      const SizedBox(height: 32),
                      _buildBottomButton(),
                      const SizedBox(height: 24),
                    ],
                  ).animate().fadeIn(duration: AppAnimations.slow, delay: AppAnimations.fast).slideY(begin: 0.2),
                ),
              ),
            ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        children: [
          Text(
            'Legal Agreements',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          Text(
            'Please review and accept to continue',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color: Colors.white70,
                ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    ).animate().fadeIn(duration: AppAnimations.slow).slideY(begin: -0.3);
  }

  Widget _buildIntroText() {
    return FrostedGlassCard(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.info_outline,
                  color: Colors.white.withValues(alpha: 0.4),
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Important Information',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          color: AppColors.primaryText,
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              'Before using Everyday Christian, please understand the following disclaimers and accept our terms of service.',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: AppColors.secondaryText,
                    height: 1.5,
                  ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDisclaimerSection({
    required IconData icon,
    required String title,
    required String content,
  }) {
    return FrostedGlassCard(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  icon,
                  color: Colors.white.withValues(alpha: 0.4),
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    title,
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: AppColors.primaryText,
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              content,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: AppColors.secondaryText,
                    height: 1.5,
                  ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCrisisResourcesSection() {
    return FrostedGlassCard(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.phone_in_talk,
                  color: Colors.red[300],
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Crisis Resources',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: AppColors.primaryText,
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildCrisisResource(
              title: '988 Suicide & Crisis Lifeline',
              description: 'Tap to call or text 988',
              icon: Icons.phone,
              onTap: _call988,
            ),
            const SizedBox(height: 12),
            _buildCrisisResource(
              title: 'Crisis Text Line',
              description: 'Tap to text HOME to 741741',
              icon: Icons.message,
              onTap: _textCrisisLine,
            ),
            const SizedBox(height: 12),
            _buildCrisisResource(
              title: 'Emergency Services',
              description: 'Tap to call 911',
              icon: Icons.local_hospital,
              onTap: _call911,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCrisisResource({
    required String title,
    required String description,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Container(
        padding: const EdgeInsets.all(12.0),
        decoration: BoxDecoration(
          color: Colors.red.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: Colors.red.withValues(alpha: 0.3),
            width: 1,
          ),
        ),
        child: Row(
          children: [
            Icon(
              icon,
              color: Colors.red[300],
              size: 24,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                          color: AppColors.primaryText,
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    description,
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: AppColors.secondaryText,
                        ),
                  ),
                ],
              ),
            ),
            Icon(
              Icons.arrow_forward_ios,
              size: 14,
              color: Colors.white.withValues(alpha: 0.4),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConsentSection() {
    return FrostedGlassCard(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.assignment,
                  color: Colors.white.withValues(alpha: 0.4),
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Acceptance Required',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: AppColors.primaryText,
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildCheckboxTile(
              value: _termsChecked,
              onChanged: (value) {
                setState(() => _termsChecked = value ?? false);
              },
              label: 'I have read and agree to the ',
              linkText: 'Terms of Service',
              onLinkTap: () => _launchURL('/terms'),
            ),
            const SizedBox(height: 12),
            _buildCheckboxTile(
              value: _privacyChecked,
              onChanged: (value) {
                setState(() => _privacyChecked = value ?? false);
              },
              label: 'I have read and agree to the ',
              linkText: 'Privacy Policy',
              onLinkTap: () => _launchURL('/privacy'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCheckboxTile({
    required bool value,
    required ValueChanged<bool?> onChanged,
    required String label,
    required String linkText,
    required VoidCallback onLinkTap,
  }) {
    final goldAccent = AppTheme.goldColor.withValues(alpha: 0.6);

    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        GestureDetector(
          onTap: () => onChanged(!value),
          child: Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(
                color: goldAccent,
                width: 2,
              ),
              color: value ? goldAccent : Colors.transparent,
            ),
            child: value
                ? const Icon(
                    Icons.check,
                    size: 16,
                    color: Colors.white,
                  )
                : null,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: GestureDetector(
            onTap: () => onChanged(!value),
            child: RichText(
              text: TextSpan(
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      color: AppColors.secondaryText,
                    ),
                children: [
                  TextSpan(text: label),
                  WidgetSpan(
                    child: GestureDetector(
                      onTap: onLinkTap,
                      child: Text(
                        linkText,
                        style: TextStyle(
                          color: Colors.black.withValues(alpha: 0.6),
                          decoration: TextDecoration.underline,
                          decorationColor: goldAccent,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBottomButton() {
    final bool canProceed = _termsChecked && _privacyChecked && !_isAccepting;

    return GlassButton(
      text: 'Accept & Continue',
      onPressed: canProceed ? _onAcceptAndContinue : null,
      isLoading: _isAccepting,
    );
  }

  Future<void> _onAcceptAndContinue() async {
    // Prevent double navigation
    if (_isNavigating) return;

    if (!_termsChecked || !_privacyChecked) {
      _showSnackBar('Please read and accept both documents');
      return;
    }

    setState(() {
      _isAccepting = true;
      _isNavigating = true;
    });

    try {
      final prefsService = await PreferencesService.getInstance();
      final success = await prefsService.saveLegalAgreementAcceptance(true);

      if (success && mounted) {
        // Navigate to onboarding screen
        Navigator.of(context).pushReplacementNamed(AppRoutes.onboarding);
      } else {
        _showSnackBar('Failed to save acceptance. Please try again.');
        setState(() {
          _isAccepting = false;
          _isNavigating = false;
        });
      }
    } catch (e) {
      _showSnackBar('Error: $e');
      setState(() {
        _isAccepting = false;
        _isNavigating = false;
      });
    }
  }

  Future<void> _launchURL(String route) async {
    // Show legal documents using reusable viewer component
    if (route == '/terms') {
      await LegalDocumentViewer.showTermsOfService(context);
    } else if (route == '/privacy') {
      await LegalDocumentViewer.showPrivacyPolicy(context);
    }
  }

  void _showSnackBar(String message) {
    if (!mounted) return;

    // Determine icon and border color based on message content
    IconData icon;
    Color borderColor;
    Color iconColor;

    if (message.startsWith('Error:') ||
        message.startsWith('Failed') ||
        message.startsWith('Unable')) {
      icon = Icons.error_outline;
      borderColor = Colors.red.withValues(alpha: 0.5);
      iconColor = Colors.red.shade300;
    } else if (message.startsWith('Please')) {
      icon = Icons.info_outline;
      borderColor = Colors.orange.withValues(alpha: 0.5);
      iconColor = Colors.orange.shade300;
    } else {
      icon = Icons.check_circle;
      borderColor = AppTheme.goldColor.withValues(alpha: 0.3);
      iconColor = AppTheme.goldColor;
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
        margin: const EdgeInsets.all(16),
        padding: EdgeInsets.zero,
        content: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFF1E293B), // slate-800
                Color(0xFF0F172A), // slate-900
              ],
            ),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: borderColor,
              width: 1,
            ),
          ),
          child: Row(
            children: [
              Icon(icon, color: iconColor, size: 20),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  message,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// Call 988 Suicide & Crisis Lifeline
  Future<void> _call988() async {
    final uri = Uri.parse('tel:988');

    try {
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
      } else {
        _showSnackBar('Unable to make call. Please dial 988 manually.');
      }
    } catch (e) {
      _showSnackBar('Error: ${e.toString()}');
    }
  }

  /// Text Crisis Text Line
  Future<void> _textCrisisLine() async {
    final uri = Uri.parse('sms:741741?body=HOME');

    try {
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
      } else {
        _showSnackBar('Unable to open messaging. Please text HOME to 741741 manually.');
      }
    } catch (e) {
      _showSnackBar('Error: ${e.toString()}');
    }
  }

  /// Call 911 Emergency Services
  Future<void> _call911() async {
    final uri = Uri.parse('tel:911');

    try {
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
      } else {
        _showSnackBar('Unable to make call. Please dial 911 manually.');
      }
    } catch (e) {
      _showSnackBar('Error: ${e.toString()}');
    }
  }
}
