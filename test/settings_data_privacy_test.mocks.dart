// Mocks generated by Mockito 5.4.6 from annotations
// in everyday_christian/test/settings_data_privacy_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:everyday_christian/core/models/prayer_request.dart' as _i2;
import 'package:everyday_christian/core/services/prayer_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePrayerRequest_0 extends _i1.SmartFake implements _i2.PrayerRequest {
  _FakePrayerRequest_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PrayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrayerService extends _i1.Mock implements _i3.PrayerService {
  MockPrayerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.PrayerRequest>> getActivePrayers(
          {String? categoryFilter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePrayers,
          [],
          {#categoryFilter: categoryFilter},
        ),
        returnValue:
            _i4.Future<List<_i2.PrayerRequest>>.value(<_i2.PrayerRequest>[]),
      ) as _i4.Future<List<_i2.PrayerRequest>>);

  @override
  _i4.Future<List<_i2.PrayerRequest>> getAnsweredPrayers(
          {String? categoryFilter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnsweredPrayers,
          [],
          {#categoryFilter: categoryFilter},
        ),
        returnValue:
            _i4.Future<List<_i2.PrayerRequest>>.value(<_i2.PrayerRequest>[]),
      ) as _i4.Future<List<_i2.PrayerRequest>>);

  @override
  _i4.Future<List<_i2.PrayerRequest>> getAllPrayers({String? categoryFilter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPrayers,
          [],
          {#categoryFilter: categoryFilter},
        ),
        returnValue:
            _i4.Future<List<_i2.PrayerRequest>>.value(<_i2.PrayerRequest>[]),
      ) as _i4.Future<List<_i2.PrayerRequest>>);

  @override
  _i4.Future<List<_i2.PrayerRequest>> getPrayersByCategory(
          String? categoryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrayersByCategory,
          [categoryName],
        ),
        returnValue:
            _i4.Future<List<_i2.PrayerRequest>>.value(<_i2.PrayerRequest>[]),
      ) as _i4.Future<List<_i2.PrayerRequest>>);

  @override
  _i4.Future<void> addPrayer(_i2.PrayerRequest? prayer) => (super.noSuchMethod(
        Invocation.method(
          #addPrayer,
          [prayer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updatePrayer(_i2.PrayerRequest? prayer) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePrayer,
          [prayer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deletePrayer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePrayer,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markPrayerAnswered(
    String? id,
    String? answerDescription,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markPrayerAnswered,
          [
            id,
            answerDescription,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.PrayerRequest> createPrayer({
    required String? title,
    required String? description,
    required String? categoryId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPrayer,
          [],
          {
            #title: title,
            #description: description,
            #categoryId: categoryId,
          },
        ),
        returnValue: _i4.Future<_i2.PrayerRequest>.value(_FakePrayerRequest_0(
          this,
          Invocation.method(
            #createPrayer,
            [],
            {
              #title: title,
              #description: description,
              #categoryId: categoryId,
            },
          ),
        )),
      ) as _i4.Future<_i2.PrayerRequest>);

  @override
  _i4.Future<int> getPrayerCount() => (super.noSuchMethod(
        Invocation.method(
          #getPrayerCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> getAnsweredPrayerCount() => (super.noSuchMethod(
        Invocation.method(
          #getAnsweredPrayerCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<String> exportPrayerJournal() => (super.noSuchMethod(
        Invocation.method(
          #exportPrayerJournal,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #exportPrayerJournal,
            [],
          ),
        )),
      ) as _i4.Future<String>);
}
